<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>gov.va.api.health</groupId>
    <artifactId>conformance-unifier-parent</artifactId>
    <version>1.0.2-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>conformance-unifier</artifactId>
  <packaging>jar</packaging>
  <properties>
    <resource.version>2.0.22</resource.version>
    <informational.version>1.0.7</informational.version>
    <s3mock-junit4.version>2.1.11</s3mock-junit4.version>
    <docker-maven-plugin.version>0.24.0</docker-maven-plugin.version>
    <docker.organization>vasdvp</docker.organization>
    <docker.tag>latest</docker.tag>
    <docker.imageName>health-apis-${project.artifactId}</docker.imageName>
  </properties>
  <profiles>
    <!-- When running a local development build manipulate application properties to use the test application.properties which is configured to use an s3 mock. -->
    <profile>
      <id>localtest</id>
      <properties>
        <!-- When running the local development dockers do not attempt to run the application docker. -->
        <docker.skip.run>true</docker.skip.run>
      </properties>
      <build>
        <!-- When running a local build do not include the main application properties but instead use the test application properties. -->
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <excludes>
              <exclude>application.properties</exclude>
            </excludes>
          </resource>
        </resources>
        <!-- When running a local build copy the test application properties for main to use. -->
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <id>copy-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes</outputDirectory>
                  <filters>
                    <filter>src/main/filters/main.properties</filter>
                  </filters>
                  <resources>
                    <resource>
                      <directory>src/test/resources</directory>
                      <include>**/application.properties</include>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- Building docker images locally can be invoked through the maven goal:
      mvn io.fabric8:docker-maven-plugin:build
      Do a mvn clean install in addition if you'd like to do regular build activities as well. -->
      <id>docker</id>
      <activation>
        <file>
          <exists>src/main/resources/application.properties</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <configuration>
              <images>
                <image>
                  <name>${docker.organization}/${docker.imageName}</name>
                  <build>
                    <assembly>
                      <descriptor>assembly.xml</descriptor>
                    </assembly>
                    <dockerFile>${basedir}/src/main/docker/Dockerfile</dockerFile>
                    <tags>
                      <tag>${project.version}</tag>
                      <tag>${docker.tag}</tag>
                    </tags>
                  </build>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>build</id>
                <phase>deploy</phase>
                <goals>
                  <goal>build</goal>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <dependencies>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>amazon-s3-interface</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>dstu2</artifactId>
      <version>${resource.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>stu3</artifactId>
      <version>${resource.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>r4</artifactId>
      <version>${resource.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health.informational</groupId>
      <artifactId>base-dstu2</artifactId>
      <version>${informational.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health.informational</groupId>
      <artifactId>base-stu3</artifactId>
      <version>${informational.version}</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health.informational</groupId>
      <artifactId>base-r4</artifactId>
      <version>${informational.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>
    <!-- test dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <dependency>
      <groupId>com.adobe.testing</groupId>
      <artifactId>s3mock-junit4</artifactId>
      <version>${s3mock-junit4.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>amazon-s3-interface-mock</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <filters>
      <filter>src/test/filters/test.properties</filter>
    </filters>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <fork>true</fork>
          <skip>false</skip>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
